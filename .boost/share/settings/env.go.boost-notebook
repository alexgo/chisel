{
  "cells": [
    {
      "outputs": [],
      "languageId": "go",
      "id": "0",
      "value": "package settings\n\nimport (\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n\t\"time\"\n)\n\n// Env returns a chisel environment variable\nfunc Env(name string) string {\n\treturn os.Getenv(\"CHISEL_\" + name)\n}\n",
      "kind": 2,
      "metadata": {
        "id": 0,
        "type": "originalCode",
        "lineNumberBase": 0
      }
    },
    {
      "outputs": [],
      "languageId": "go",
      "id": "1",
      "value": "\n// EnvInt returns an integer using an environment variable, with a default fallback\nfunc EnvInt(name string, def int) int {\n\tif n, err := strconv.Atoi(Env(name)); err == nil {\n\t\treturn n\n\t}\n\treturn def\n}\n",
      "kind": 2,
      "metadata": {
        "id": 1,
        "type": "originalCode",
        "lineNumberBase": 13
      }
    },
    {
      "outputs": [],
      "languageId": "go",
      "id": "2",
      "value": "\n// EnvDuration returns a duration using an environment variable, with a default fallback\nfunc EnvDuration(name string, def time.Duration) time.Duration {\n\tif n, err := time.ParseDuration(Env(name)); err == nil {\n\t\treturn n\n\t}\n\treturn def\n}\n",
      "kind": 2,
      "metadata": {
        "id": 2,
        "type": "originalCode",
        "lineNumberBase": 21
      }
    },
    {
      "outputs": [],
      "languageId": "go",
      "id": "3",
      "value": "\n// EnvBool returns a boolean using an environment variable\nfunc EnvBool(name string) bool {\n\tv := Env(name)\n\treturn v == \"1\" || strings.ToLower(v) == \"true\"\n}\n",
      "kind": 2,
      "metadata": {
        "id": 3,
        "type": "originalCode",
        "lineNumberBase": 29
      }
    }
  ],
  "metadata": {
    "defaultDir": ".boost",
    "sourceFile": "./share/settings/env.go"
  }
}